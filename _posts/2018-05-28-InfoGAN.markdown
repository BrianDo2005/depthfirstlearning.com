---
layout: post
title:  "InfoGAN"
date:   2018-05-28 10:00:00 -0400
categories: generative-adversarial-networs representation-learning
author: avital
blurb: "InfoGAN is an extension of GANs that learns to represent unlabeled 
        data as codes. Representation learning is an important aspect of 
        unsupervised learning and GANs are a flexible and powerful interpretation.
        This makes InfoGAN an important and interesting stepping stone in
        representation learning."
---

# Why

InfoGAN is an extension of GANs that learns to represent unlabeled data as codes,
aka Representation Learning. Compare this to vanilla GANs that can only generate 
samples or to VAEs that learn to both generate code and samples. Representation 
learning is an important direction for unsupervised learning and GANs are a 
flexible and powerful interpretation. This makes InfoGAN an interesting stepping 
stone towards research in representation learning.

<br />

# 1 Information Theory
  **Motivation**: Information theory formalizes the concept of the "amount of randomness" or 
"amount of information". These concepts can be extended to relative quantities 
among random variables. This section leads to Mutual Information, a concept core to 
InfoGAN which extends entropy to how much additional information you yield from 
observing a joint sample of two random variables as compared to the baseline of 
observing each variable separately. 

  **Topics**:
  1. Entropy
  2. Differential Entropy
  3. Conditional Entropy
  4. Jensen’s Inequality
  5. KL divergence
  6. Mutual Information

  **Required Reading**:
  1. Chapter 1.6 from Pattern Recognition and Machine Learning / Bishop. ("PRML")
  2. A good [intuitive explanation of Entropy](https://www.quora.com/What-is-an-intuitive-explanation-of-the-concept-of-entropy-in-information-theory/answer/Peter-Gribble), from Quora.
  3. For more perspectives and deeper dependencies, see Metacademy:
  4. [Entropy](https://metacademy.org/graphs/concepts/entropy)
  5. [Mutual Information](https://metacademy.org/graphs/concepts/mutual_information)
  6. [KL diverence](https://metacademy.org/graphs/concepts/kl_divergence)
  
  **Optional Reading**:
  1. [Notes on Kullback-Leibler Divergence and Likelihood Theory](https://arxiv.org/pdf/1404.2000.pdf)

  **Questions**:
  1. From PRML: 1.28, 1.31, 1.36, 1.37, 1.38, 1.39, 1.41.
  2. How is Mutual Information similar to correlation? How are they different? Are they directly related under some conditions?
  3. In classification problems, [minimizing cross-entropy loss is the same as minimizing the KL divergence 
     of the predicted class distribution from the true class distribution](https://ai.stackexchange.com/questions/3065/why-has-cross-entropy-become-the-classification-standard-loss-function-and-not-k/4185). Why do we minimize the KL, rather
     than other measures, such as L2 distance?
     <details><summary>One possible answer</summary>
     <p>
     In classification problem: One natural measure of “goodness” is the likelihood or marginal prob of observed values. By definition, it’s P(Y | X; params), which is Prod_i P(Y = yi | X; params). This says that we want to maximize the probability of producing the “correct” yi class only, and don’t really care to push down the probability of incorrect class like L2 loss would.
     </p><p>
     E.g., suppose the true label y = [0, 1, 0] (one-hot of class label {1, 2, 3}), and the softmax of the final layer in NN is y’ = [0.2, 0.5, 0.3]. One could use L2 between these two distributions, but if instead we minimize KL divergence KL(y || y’), which is equivalent to minimizing cross-entropy loss (the standard loss everyone uses to solve this problem), we would compute 0 * log(0) + 1 * log (0.5) + 0 * log(0) = log(0.5), which describes exactly the log likelihood of the label being class 2 for this particular training example. Here choosing to minimize KL means we’re maximizing the data likelihood. I think it could also be reasonable to use L2, but we would be maximizing the data likelihood + “unobserved anti-likelihood” :) (my made up word) meaning we want to kill off all those probabilities of predicting wrong labels as well. Another reason L2 is less prefered might be that L2 involves looping over all class labels whereas KL can look only at the correct class when computing the loss.
     </p>
     </details>

<br />

# 2 Generative Adversarial Networks (GAN)
  **Motivation**: GANs are framework for constructing models that learn to sample 
  from a probability distribution, given a finite sample from that distribution.
  More concretely, after training on a finite unlabeled dataset (say of images), 
  a GAN can generate new images from the same "kind" that aren't in the original
  training set.

  **Topics**:
  1. JS (Jensen-Shannon) divergence
  2. How are GANs trained?
  3. Various possible GAN objectives. Why are they needed?
  4. GAN training minimizes the JS divergence between the data-generating distribution and the distribution of samples from the generator part of the GAN

  **Required Reading**:
  1. [JS Divergence](https://en.wikipedia.org/wiki/Jensen%E2%80%93Shannon_divergence)
  2. [The original GAN paper](https://arxiv.org/abs/1406.2661)

  **Questions**:
  1. Prove that 0 <= JSD(P||Q) <= 1 bit for all P, Q. When are the bounds achieved?
     <details><summary>Answer</summary>Start <a href="https://en.wikipedia.org/wiki/Jensen-Shannon_divergence#Relation_to_mutual_information">here</a>.
     </details>
  2. What are the bounds for KL divergence? When are those bounds achieved?
<!--- TODO:  - Why is it called the Jensen-Shannon divergence? --->
  3. In the paper, why do they say “In practice, equation 1 may not provide sufficient gradient for G to learn well. Early in learning, when G is poor, D can reject samples with high confidence because they are clearly different from the training data. In this case, log(1 − D(G(z))) saturates”?
     <details><summary>A sketch of an answer</summary>
       <a href="/assets/gan_gradient.pdf">Understanding the vanishing generator gradients point in the GAN paper</a>
     </details>
  4. Implement a [Colab](https://colab.research.google.com/) that trains a GAN for MNIST. Try both the saturating and non-saturating discriminator loss.


<br />

# 3 The Paper
  **Motivation**: Let's read the [paper](https://arxiv.org/abs/1606.03657). Keep
  in mind that InfoGAN modifies the original GAN objective in this way:
  1. Split the incoming noise vector z into two parts - noise and code. The goal 
     is to learn meaningful codes for the dataset.
  2. In addition to the discriminator, it adds another prediction head to the 
     network that tries to predict the code from the generated sample. The loss 
     is a combination of the normal GAN loss and the prediction loss.
  3. This new loss term can be interpreted as a lower bound on the mutual 
     information between the generated samples and the code.

  **Topics**:
  1. The InfoGAN objective
  2. Why can't we directly optimize for the mutual information I(c; G(z,c))
  3. Variational Information Maximization
  4. Possible choices for classes of random variables for dimensions of the code c

  **Reproduce InfoGAN in a Colab**:
  
  <a class="colab-reproduce" href="https://colab.research.google.com/drive/1JkCI_n2U2i6DFU8NKk3P6EkPo3ZTKAaq#forceEdit=true&offline=true&sandboxMode=true" class="colab-root">Reproduce in a
    <span>Notebook</span></a>

<!--- [Open in Colab](https://colab.research.google.com/drive/1JkCI_n2U2i6DFU8NKk3P6EkPo3ZTKAaq#forceEdit=true&offline=true&sandboxMode=true)
-->

  **Required Reading**:
  1. [InfoGAN](https://arxiv.org/abs/1606.03657)
  2. [A correction to a proof in the paper](http://aoliver.org/assets/correct-proof-of-infogan-lemma.pdf)
  
  **Optional Reading**:
  1. [A blog post explaining InfoGAN](https://towardsdatascience.com/infogan-generative-adversarial-networks-part-iii-380c0c6712cd)

  **Questions**:
  1. How does one compute log Q(c|x) in practice? How does this answer change based on the choice of the type of random variables in c?
     <details><summary>Hint</summary>
       <p>What is log Q(c|x) when c is a Gaussian centered at f_theta(x)? What about when c is the output of a softmax?
       </p><p>
       See section 6 in the paper.
       </p> 
     </details>
  2. Which objective in the paper can actually be optimized with gradient-based algorithms? How? (An answer to this needs to refer to "the reparameterization trick")
  3. Why is an auxiliary Q distribution necessary?
  4. Draw a neural network diagram for InfoGAN
     <details><summary>Answer</summary>
       There is a good diagram in <a href="https://towardsdatascience.com/infogan-generative-adversarial-networks-part-iii-380c0c6712cd">this blog post</a>
     </details>
  5. In the paper they say "However, in this paper we opt for
simplicity by fixing the latent code distribution and we will treat H(c) as a constant.". What if you want to learn
the latent code (say, if you don't know that classes are balanced in the dataset). Can you still optimize for this with gradient-based algorithms? Can you implement this on an intentionally class-imbalanced variant of MNIST?
     <details><summary>A sketch of an answer</summary>
     You could imagine learning the parameters of the distribution of c, if you can get H(c) to be a differentiable function of those parameters.
     </details>
  6. In the paper they say "the lower bound ... is quickly maximized to ... and maximal mutual information is achieved". How do they know this is the maximal value?
  7. Open-ended question: Is InfoGAN guaranteed to find disentangled representations? How would you tell if a representation is disentangled?
